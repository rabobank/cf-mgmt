// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vmwarepivotallabs/cf-mgmt/user"
)

type FakeAzureADManager struct {
	GetADTokenStub        func() string
	getADTokenMutex       sync.RWMutex
	getADTokenArgsForCall []struct {
	}
	getADTokenReturns struct {
		result1 string
	}
	getADTokenReturnsOnCall map[int]struct {
		result1 string
	}
	GraphGetGroupMembersStub        func(string, string) ([]string, error)
	graphGetGroupMembersMutex       sync.RWMutex
	graphGetGroupMembersArgsForCall []struct {
		arg1 string
		arg2 string
	}
	graphGetGroupMembersReturns struct {
		result1 []string
		result2 error
	}
	graphGetGroupMembersReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAzureADManager) GetADToken() string {
	fake.getADTokenMutex.Lock()
	ret, specificReturn := fake.getADTokenReturnsOnCall[len(fake.getADTokenArgsForCall)]
	fake.getADTokenArgsForCall = append(fake.getADTokenArgsForCall, struct {
	}{})
	stub := fake.GetADTokenStub
	fakeReturns := fake.getADTokenReturns
	fake.recordInvocation("GetADToken", []interface{}{})
	fake.getADTokenMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAzureADManager) GetADTokenCallCount() int {
	fake.getADTokenMutex.RLock()
	defer fake.getADTokenMutex.RUnlock()
	return len(fake.getADTokenArgsForCall)
}

func (fake *FakeAzureADManager) GetADTokenCalls(stub func() string) {
	fake.getADTokenMutex.Lock()
	defer fake.getADTokenMutex.Unlock()
	fake.GetADTokenStub = stub
}

func (fake *FakeAzureADManager) GetADTokenReturns(result1 string) {
	fake.getADTokenMutex.Lock()
	defer fake.getADTokenMutex.Unlock()
	fake.GetADTokenStub = nil
	fake.getADTokenReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeAzureADManager) GetADTokenReturnsOnCall(i int, result1 string) {
	fake.getADTokenMutex.Lock()
	defer fake.getADTokenMutex.Unlock()
	fake.GetADTokenStub = nil
	if fake.getADTokenReturnsOnCall == nil {
		fake.getADTokenReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getADTokenReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeAzureADManager) GraphGetGroupMembers(arg1 string, arg2 string) ([]string, error) {
	fake.graphGetGroupMembersMutex.Lock()
	ret, specificReturn := fake.graphGetGroupMembersReturnsOnCall[len(fake.graphGetGroupMembersArgsForCall)]
	fake.graphGetGroupMembersArgsForCall = append(fake.graphGetGroupMembersArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GraphGetGroupMembersStub
	fakeReturns := fake.graphGetGroupMembersReturns
	fake.recordInvocation("GraphGetGroupMembers", []interface{}{arg1, arg2})
	fake.graphGetGroupMembersMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAzureADManager) GraphGetGroupMembersCallCount() int {
	fake.graphGetGroupMembersMutex.RLock()
	defer fake.graphGetGroupMembersMutex.RUnlock()
	return len(fake.graphGetGroupMembersArgsForCall)
}

func (fake *FakeAzureADManager) GraphGetGroupMembersCalls(stub func(string, string) ([]string, error)) {
	fake.graphGetGroupMembersMutex.Lock()
	defer fake.graphGetGroupMembersMutex.Unlock()
	fake.GraphGetGroupMembersStub = stub
}

func (fake *FakeAzureADManager) GraphGetGroupMembersArgsForCall(i int) (string, string) {
	fake.graphGetGroupMembersMutex.RLock()
	defer fake.graphGetGroupMembersMutex.RUnlock()
	argsForCall := fake.graphGetGroupMembersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAzureADManager) GraphGetGroupMembersReturns(result1 []string, result2 error) {
	fake.graphGetGroupMembersMutex.Lock()
	defer fake.graphGetGroupMembersMutex.Unlock()
	fake.GraphGetGroupMembersStub = nil
	fake.graphGetGroupMembersReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeAzureADManager) GraphGetGroupMembersReturnsOnCall(i int, result1 []string, result2 error) {
	fake.graphGetGroupMembersMutex.Lock()
	defer fake.graphGetGroupMembersMutex.Unlock()
	fake.GraphGetGroupMembersStub = nil
	if fake.graphGetGroupMembersReturnsOnCall == nil {
		fake.graphGetGroupMembersReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.graphGetGroupMembersReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeAzureADManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getADTokenMutex.RLock()
	defer fake.getADTokenMutex.RUnlock()
	fake.graphGetGroupMembersMutex.RLock()
	defer fake.graphGetGroupMembersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAzureADManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ user.AzureADManager = new(FakeAzureADManager)
